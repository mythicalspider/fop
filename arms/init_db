-- this is now outdated, being replaced by the feature oriented version
-- comment this out if you don't want to start from a clean slate
drop database if exists systemhub;

create database if not exists systemhub;

use systemhub;

set default_storage_engine=InnoDB;

create table if not exists global_package_requirements (
  name varchar(50) not null primary key
);

create table if not exists user_group (
  user_group_id int not null auto_increment primary key
  , name varchar(25) not null
  , unique index (name)
);

replace into user_group
    (user_group_id, name   ) values
    (1            , 'admin')
  ;

create table if not exists prop_group (
  prop_group_id int auto_increment not null primary key
  , name varchar(25) not null
  , unique index (name)
);

create table if not exists prop_group_to_prop_group (
  parent int not null
  , child int not null
  , primary key (parent, child)
);

create table if not exists prop_class (
  prop_class_id int auto_increment not null primary key
  , name varchar(25) not null
  , unique index (name)
);

create table if not exists user (
  user_id int auto_increment not null primary key
  , name varchar(25) not null
  , full_name varchar(50) not null
  , unique index (name)
);

replace into user 
    (user_id, name   , full_name     ) values
    (1      , 'auto' , 'Auto Mation' )
  , (2      , 'admin', 'System Admin')
  ;

create table if not exists contact_method (
  contact_method_id int auto_increment not null primary key
  , name varchar(25) not null comment 'example: email, slack, text_message'
  , code text not null comment 'bash script which takes parameters: {user full name} {address defined in user_to_contact_method table} {severity level 0-3} {short message} {long message which may include newlines}'
  , unique index (name)
);

create table if not exists user_to_contact_method (
  user_id int not null
  , contact_method_id int not null
  , address varchar(255) not null comment 'possibly email address, phone number, etc, specific to the contact method. Will be passed into the contact method script'
  , min_severity int not null default 0 comment 'will not use this contact method unless the message has a minimum severity level of this number'
  , primary key (user_id, contact_method_id, address)
);

create table if not exists user_group_to_user (
  user_group_id int not null
  , user_id int not null
  , primary key (user_group_id, user_id)
  , foreign key (user_group_id) references user_group(user_group_id) on update cascade on delete cascade
  , foreign key (user_id) references user(user_id) on update cascade on delete cascade
);

create table if not exists prop (
  prop_id int auto_increment not null primary key
  , prop_group_id int not null
  , name varchar(25) not null
  , prop_class_id int not null
  , observation_frequency tinyint not null comment '0 mean no auto observation. 10 means wait 10 seconds between observations, 20=100 secs, 30=1000 secs'
  , index (name)
  , foreign key (prop_group_id) references prop_group(prop_group_id) on update cascade on delete cascade
  , foreign key (prop_class_id) references prop_class(prop_class_id) on update cascade on delete cascade
);

create table if not exists prop_existence_implication (
  prop_id int not null
  , implies_prop int not null
  , primary key (prop_id, implies_prop)
  , foreign key (prop_id) references prop(prop_id) on update cascade on delete cascade
  , foreign key (implies_prop) references prop(prop_id) on update cascade on delete restrict
);

create table if not exists prop_access (
  prop_id int not null
  , user_group_id int not null
  , access_level enum('read','update','create','delete') not null
  , foreign key (prop_id) references prop(prop_id) on update cascade on delete cascade
  , foreign key (user_group_id) references user_group(user_group_id) on update cascade on delete cascade
  , primary key (prop_id, user_group_id, access_level)
);

create table if not exists last_observation (
  prop_id int not null primary key
  , last_observation_time datetime comment 'null means not observed yet'
  , next_observation_time datetime comment 'null means never auto observe'
  , observed_value varchar(255) comment 'null means not observed or failed to observe'
  , observed_by_user int not null comment 'id 1 is the special auto user'
  , foreign key (observed_by_user) references user(user_id) on update cascade on delete cascade
);

-- gaps are recorded here if observation is made on overdue observer
-- only changes are recorded
-- if value is the same, the last record is updated
create table if not exists observation_history (
  observation_history_id bigint not null primary key auto_increment
  , prop_id int not null
  , from_time datetime not null
  , to_time datetime not null
  , observed_value varchar(255) comment 'null means not observed or failed to observe'
  , unique index (prop_id, to_time)
);

