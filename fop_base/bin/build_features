#!/bin/bash

# error out if we try to use an unset variable
set -u

debug=${debug:-1}
featureset="${1:-}"

unset verify_dependencies
verify_dependencies() {
  local dp=features/$feature/dependencies
  local found f
  if [ -f $dp ]; then
    for dependency in $(cat $dp | strip_hash_comments); do
      unset found
      for f in "${features[@]}"; do
        if [ "$f" == "$dependency" ]; then
          found=true
          break
        fi
      done
      if [ ! "$found" ]; then 
        err "feature [$feature] requires [$dependency] to be present earlier in the featureset"
        return 1
      fi
    done
  fi
}

source lib/common || exit 1
for file in $(find lib -mindepth 1 -maxdepth 1 -not -name common -not -name ".*" -type f); do
  source $file || exit 1
done

if [ ! "$featureset" ]; then
  err "Usage: $0 {featureset}"
  err " from the folder containing a features and feature_sets folders"
  err "current featuresets: $(find feature_sets -mindepth 1 -maxdepth 1 -not -name '.*' -type f -printf "%f ")"
  exit 1
fi

unset standard_convention
standard_convention() {
  if [ -f init_db.sql ]; then
    cat init_db.sql >>$build_folder/init_db.sql || return 1
  fi
  if [ -f template.init_db.sql ]; then
    cat template.init_db.sql | hydrate_template >>$build_folder/init_db.sql || return 1
  fi
  if [ -f slice.init_db.sql ]; then
    cat slice.init_db.sql | hydrate_slice $build_folder/init_db.sql || return 1
  fi
  if [ -d tests ]; then
    rcp tests/ $build_folder/tests/ >/dev/null || return 1
  fi
  if [ -d bin ]; then
    rcp bin/ $build_folder/bin/ >/dev/null || return 1
  fi
  if [ -d lib ]; then
    rcp lib/ $build_folder/lib/ >/dev/null || return 1
  fi
}

unset process_features
process_features() {
  local feature feature_line features="" fp field
  OIFS="$IFS"
  IFS=$'\n'
  for feature_line in $(cat feature_sets/$featureset | strip_hash_comments); do
    IFS="$OIFS"
    feature_line=( $feature_line )
    feature="${feature_line[0]}"
    eval "${feature_line[*]:1}"

    if [ ! -d features/$feature ]; then
      err "missing feature: $feature"
      exit 1
    fi
    out "Before feature: $feature"

    verify_dependencies || exit 1
    fp=features/$feature
    cd $fp || exit 1

    if [ -f "before" ]; then
      source ./before || exit 1
    fi

    standard_convention || exit 1

    cd ../.. || exit 1
    
    features=( $feature "${features[@]}" )
  done

  for feature in "${features[@]}"; do
    fp=features/$feature
    if [ -f "$fp/after" ]; then
      out "After feature: $feature"
      cd $fp || exit 1
      source ./after || exit 1
      cd ../.. || exit 1
    fi
  done
}

process_features

