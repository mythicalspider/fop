#!/bin/bash

# functions to track a pool of linux processes launched from shell commands. When a process ends, a slot becomes available
# creates the following global variables:
#   max_tracked_processes
#   process_pool[]       contains pid of each process
#
# example:
#   initialize_process_tracking 4    # sets up worker pool with a maximum of 4 workers
#   if can_launch_more_processes; then
#     sh my_script &
#     track_process
#   fi
#

# set up the process tracking pool
# usage: initialize_process_tracking {max num of processes}
initialize_process_tracking() {
  max_tracked_processes=$1
  # this contains the pids of each process in the pool
  process_pool=();
}

# returns true (rc=0) if there is room for more processes in the tracking pool
#   sets job_id = slot id of the first free slot
can_launch_more_processes() {
out "can_launch_more_processes max_tracked_processes=$max_tracked_processes"
unset job_id
local j
try
  # free up worker slots if jobs are done
  for ((i=0; i<max_tracked_processes; i++)); do
    out "checking out slot $i"
    j=${process_pool[$i]:-}
    if [ "${j:-}" ]; then
      out "it is occupied by $j"
      if ps $j &>/dev/null; then
        out "and it's still running"
        continue
      else
        out "but it's not running, so we'll take that spot"
        process_pool[$i]=
      fi
    else
      out "it is unoccupied"
    fi
    job_id=$i
    break
  done
end_try

[ ! "${job_id:-}" ] && return 1
out "slot found: job_id=$job_id"
return 0
}

# returns true (rc=0) if there is at least one completed process to be removed from the pool
#   sets 
#     job_pid = pid of the process which completed
#     job_id = slot id of the process
#   and removes the job from the tracked list
grab_completed_process() {
  out "grab_completed_process"
  unset job_id job_pid
  local j
  # free up worker slots if jobs are done
  for ((i=0; i<max_tracked_processes; i++)); do
    j=${process_pool[$i]:-}
    if [ "${j:-}" ]; then
      if ps $j &>/dev/null; then
        continue
      else
        job_pid=${process[$i]}
        job_id=$i
        process_pool[$i]=
      fi
    fi
  done

  [ ! "${job_id:-}" ] && return 1
}

# intended to be run immediately after launching a background process (which sets $!), 
#   and after can_launch_more_processes was run successfully, which sets $job_id
track_process() {
  process_pool[$job_id]=$!
}

